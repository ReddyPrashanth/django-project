# Generated by Django 3.2.11 on 2022-01-16 21:46

import ckeditor.fields
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('meta_title', models.CharField(max_length=100)),
                ('slug', models.CharField(max_length=50)),
                ('summary', models.TextField()),
                ('published', models.BooleanField(default=False)),
                ('pub_date', models.DateField(null=True)),
                ('content', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='blog.post')),
            ],
        ),
        migrations.CreateModel(
            name='Likedislike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('liked', models.BooleanField(default=False)),
                ('disliked', models.BooleanField(default=False)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='blog.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='reply',
            index=models.Index(fields=['user_id'], name='idx_reply_user_id'),
        ),
        migrations.AddIndex(
            model_name='reply',
            index=models.Index(fields=['comment_id'], name='idx_comment_id'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author_id'], name='idx_author_id'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(['parent_id'], name='idx_parent_id'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.UniqueConstraint(fields=('slug',), name='uq_slug'),
        ),
        migrations.AddIndex(
            model_name='likedislike',
            index=models.Index(fields=['user_id'], name='idx_like_user_id'),
        ),
        migrations.AddIndex(
            model_name='likedislike',
            index=models.Index(fields=['post_id'], name='idx_like_post_id'),
        ),
        migrations.AlterUniqueTogether(
            name='likedislike',
            unique_together={('user', 'post')},
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['user_id'], name='idx_user_id'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['post_id'], name='idx_post_id'),
        ),
    ]
